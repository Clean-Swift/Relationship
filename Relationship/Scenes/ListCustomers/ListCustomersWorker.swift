//
//  ListCustomersWorker.swift
//  Relationship
//
//  Created by Raymond Law on 9/16/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListCustomersWorker
{
  var customerDataStore = CustomerCoreDataStore.shared
  
  func fetchCustomers(completionHandler: @escaping (() throws -> [Customer]) -> Void)
  {
    customerDataStore.fetchCustomers { (managedCustomers: () throws -> [ManagedCustomer]) in
      do {
        let managedCustomers = try managedCustomers()
        let customers = managedCustomers.map { $0.toCustomer() }
        completionHandler { return customers }
      } catch {}
    }
  }
  
  func fetchCustomer(id: String, completionHandler: @escaping (() throws -> Customer?) -> Void)
  {
    customerDataStore.fetchCustomer(id: id) { (managedCustomer: () throws -> ManagedCustomer?) in
      do {
        let managedCustomer = try managedCustomer()
        if let customer = managedCustomer?.toCustomer() {
          completionHandler { return customer }
        } else {
          throw CoreDataStoreError.CannotFetch("Cannot fetch customer with id \(id)")
        }
      } catch {}
    }
  }
  
  func createCustomer(customerToCreate: Customer, completionHandler: @escaping (() throws -> Customer?) -> Void)
  {
    customerDataStore.createCustomer(customerToCreate: customerToCreate) { (managedCustomer: () throws -> ManagedCustomer?) in
      do {
        let managedCustomer = try managedCustomer()
        if let customer = managedCustomer?.toCustomer() {
          completionHandler { return customer }
        } else {
          throw CoreDataStoreError.CannotCreate("Cannot create customer with id \(String(describing: customerToCreate.id))")
        }
      } catch {}
    }
  }
  
  func updateCustomer(customerToUpdate: Customer, completionHandler: @escaping (() throws -> Customer?) -> Void)
  {
    customerDataStore.updateCustomer(customerToUpdate: customerToUpdate) { (managedCustomer: () throws -> ManagedCustomer?) in
      do {
        let managedCustomer = try managedCustomer()
        if let customer = managedCustomer?.toCustomer() {
          completionHandler { return customer }
        } else {
          throw CoreDataStoreError.CannotUpdate("Cannot update customer with id \(String(describing: customerToUpdate.id))")
        }
      } catch {}
    }
  }
  
  func deleteCustomer(id: String, completionHandler: @escaping (() throws -> Void) -> Void)
  {
    customerDataStore.deleteCustomer(id: id) { (_: () throws -> Void) in
      completionHandler {}
    }
  }
  
  func printCustomers(message: String, customers: [Customer])
  {
    debugPrint(#function, message)
    customers.forEach({ (customer) in
      debugPrint(customer)
    })
  }
}
