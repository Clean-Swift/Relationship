//
//  ListLicensesWorker.swift
//  Relationship
//
//  Created by Raymond Law on 9/16/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListLicensesWorker
{
  var licenseDataStore = LicenseCoreDataStore.shared
  
  func fetchLicenses(for customer: Customer, completionHandler: @escaping (() throws -> [License]) -> Void)
  {
    licenseDataStore.fetchLicenses(for: customer) { (managedLicenses: () throws -> [ManagedLicense]) in
      do {
        let managedLicenses = try managedLicenses()
        let licenses = managedLicenses.map { $0.toLicense(customer: customer) }
        completionHandler { return licenses }
      } catch {}
    }
  }
  
  func fetchLicense(id: String, for customer: Customer, completionHandler: @escaping (() throws -> License?) -> Void)
  {
    licenseDataStore.fetchLicense(id: id) { (managedLicense: () throws -> ManagedLicense?) in
      do {
        let managedLicense = try managedLicense()
        if let license = managedLicense?.toLicense(customer: customer) {
          completionHandler { return license }
        } else {
          throw CoreDataStoreError.CannotFetch("Cannot fetch license with id \(id)")
        }
      } catch {}
    }
  }
  
  func createLicense(licenseToCreate: License, for customer: Customer, completionHandler: @escaping (() throws -> License?) -> Void)
  {
    licenseDataStore.createLicense(licenseToCreate: licenseToCreate, for: customer) { (managedLicense: () throws -> ManagedLicense?) in
      do {
        let managedLicense = try managedLicense()
        if let license = managedLicense?.toLicense(customer: customer) {
          completionHandler { return license }
        } else {
          throw CoreDataStoreError.CannotCreate("Cannot create license with id \(String(describing: licenseToCreate.id))")
        }
      } catch {}
    }
  }
  
  func updateLicense(licenseToUpdate: License, for customer: Customer, completionHandler: @escaping (() throws -> License?) -> Void)
  {
    licenseDataStore.updateLicense(licenseToUpdate: licenseToUpdate) { (managedLicense: () throws -> ManagedLicense?) in
      do {
        let managedLicense = try managedLicense()
        if let license = managedLicense?.toLicense(customer: customer) {
          completionHandler { return license }
        } else {
          throw CoreDataStoreError.CannotUpdate("Cannot update license with id \(String(describing: licenseToUpdate.id))")
        }
      } catch {}
    }
  }
  
  func deleteLicense(id: String, completionHandler: @escaping (() throws -> Void) -> Void)
  {
    licenseDataStore.deleteLicense(id: id) { (_: () throws -> Void) in
      completionHandler {}
    }
  }
  
  func printLicenses(message: String, licenses: [License])
  {
    debugPrint(#function, message)
    licenses.forEach({ (license) in
      debugPrint(license)
    })
  }
}
