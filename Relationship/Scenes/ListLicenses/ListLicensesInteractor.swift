//
//  ListLicensesInteractor.swift
//  Relationship
//
//  Created by Raymond Law on 9/16/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListLicensesBusinessLogic
{
  func setNavBarTitle(request: ListLicenses.SetNavBarTitle.Request)
  func fetchLicenses(request: ListLicenses.FetchLicenses.Request)
  func createLicense(request: ListLicenses.CreateLicense.Request)
  func deleteLicense(request: ListLicenses.DeleteLicense.Request)
}

protocol ListLicensesDataStore
{
  var customer: Customer? { get set }
}

class ListLicensesInteractor: ListLicensesBusinessLogic, ListLicensesDataStore
{
  var presenter: ListLicensesPresentationLogic?
  var listLicensesWorker = ListLicensesWorker()
  var licenses: [License] = []
  var customer: Customer?
  
  // MARK: Set nav bar title
  
  func setNavBarTitle(request: ListLicenses.SetNavBarTitle.Request)
  {
    let response = ListLicenses.SetNavBarTitle.Response(customerName: customer?.name)
    presenter?.presentNavBarTitle(response: response)
  }
  
  // MARK: Fetch licenses
  
  func fetchLicenses(request: ListLicenses.FetchLicenses.Request)
  {
    guard let customer = customer else { return }
    listLicensesWorker.fetchLicenses(for: customer) { (licenses: () throws -> [License]) in
      do {
        self.licenses = try licenses()
        let response = ListLicenses.FetchLicenses.Response(licenses: self.licenses)
        self.presenter?.presentFetchedLicenses(response: response)
      } catch {}
    }
  }
  
  // MARK: Create license
  
  func createLicense(request: ListLicenses.CreateLicense.Request)
  {
    guard let customer = customer else { return }
    let license = License(id: request.id, serial: request.serial, customer: customer)
    listLicensesWorker.createLicense(licenseToCreate: license, for: customer) { (license: () throws -> License?) in
      let license = try! license()!
      self.licenses.append(license)
      let response = ListLicenses.CreateLicense.Response(licenses: self.licenses)
      self.presenter?.presentCreatedLicense(response: response)
    }
  }
  
  // MARK: Delete license
  
  func deleteLicense(request: ListLicenses.DeleteLicense.Request)
  {
    let index = request.indexPath.row
    let license = licenses[index]
    listLicensesWorker.deleteLicense(id: license.id) { (_: () throws -> Void) in
      self.licenses.remove(at: index)
      let response = ListLicenses.DeleteLicense.Response(licenses: self.licenses)
      self.presenter?.presentDeletedLicense(response: response)
    }
  }
}
