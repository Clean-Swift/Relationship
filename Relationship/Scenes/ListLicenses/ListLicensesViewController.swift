//
//  ListLicensesViewController.swift
//  Relationship
//
//  Created by Raymond Law on 9/16/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol ListLicensesDisplayLogic: class
{
  func displayNavBarTitle(viewModel: ListLicenses.SetNavBarTitle.ViewModel)
  func displayFetchedLicenses(viewModel: ListLicenses.FetchLicenses.ViewModel)
  func displayCreatedLicense(viewModel: ListLicenses.CreateLicense.ViewModel)
  func displayDeletedLicense(viewModel: ListLicenses.DeleteLicense.ViewModel)
}

class ListLicensesViewController: UITableViewController, ListLicensesDisplayLogic
{
  var interactor: ListLicensesBusinessLogic?
  var router: (NSObjectProtocol & ListLicensesRoutingLogic & ListLicensesDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListLicensesInteractor()
    let presenter = ListLicensesPresenter()
    let router = ListLicensesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    navigationItem.leftBarButtonItem = splitViewController?.displayModeButtonItem
    navigationItem.leftItemsSupplementBackButton = true
    
    configureNavigationBarButtons()
    setNavBarTitle()
    fetchLicenses()
  }
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    clearsSelectionOnViewWillAppear = splitViewController!.isCollapsed
  }
  
  // MARK: - Configure navigation bar buttons
  
  func configureNavigationBarButtons()
  {
    navigationItem.leftBarButtonItem = editButtonItem
    let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTapped(_:)))
    navigationItem.rightBarButtonItem = addButton
  }
  
  // MARK: - Table View
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return displayedLicenses.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let cell = tableView.dequeueReusableCell(withIdentifier: "LicenseCell", for: indexPath)
    let displayedLicense = displayedLicenses[indexPath.row]
    configureCell(cell, withDisplayedLicense: displayedLicense)
    return cell
  }
  
  func configureCell(_ cell: UITableViewCell, withDisplayedLicense displayedLicense: ListLicenses.DisplayedLicense)
  {
    cell.textLabel!.text = displayedLicense.serial
  }
  
  override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool
  {
    return true
  }
  
  override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
  {
    if editingStyle == .delete {
      deleteLicense(at: indexPath)
    }
  }
  
  // MARK: Set nav bar title
  
  func setNavBarTitle()
  {
    let request = ListLicenses.SetNavBarTitle.Request()
    interactor?.setNavBarTitle(request: request)
  }
  
  func displayNavBarTitle(viewModel: ListLicenses.SetNavBarTitle.ViewModel)
  {
    navigationItem.title = viewModel.title
  }
  
  // MARK: Fetch licenses
  
  var displayedLicenses: [ListLicenses.DisplayedLicense] = []
  
  func fetchLicenses()
  {
    let request = ListLicenses.FetchLicenses.Request()
    interactor?.fetchLicenses(request: request)
  }
  
  func displayFetchedLicenses(viewModel: ListLicenses.FetchLicenses.ViewModel)
  {
    displayedLicenses = viewModel.displayedLicenses
    tableView.reloadData()
  }
  
  // MARK: Create license
  
  func addButtonTapped(_ sender: Any)
  {
    showCreateLicenseAlert()
  }
  
  private func showCreateLicenseAlert()
  {
    let alertController = UIAlertController(title: "title", message: "message", preferredStyle: .alert)
    
    let createAlertAction = UIAlertAction(title: "Create", style: .default) { (alertAction) in
      let id = alertController.textFields?[0].text
      let serial = alertController.textFields?[1].text
      if let id = id, let serial = serial {
        self.createLicense(id: id, serial: serial)
      }
    }
    createAlertAction.isEnabled = false
    alertController.addAction(createAlertAction)
    
    alertController.addTextField { (textField) in
      textField.placeholder = "Enter the license ID"
      NotificationCenter.default.addObserver(forName: NSNotification.Name.UITextFieldTextDidChange, object: textField, queue: OperationQueue.main, using: { (notification) in
        createAlertAction.isEnabled = (alertController.textFields?[0].text != "" && alertController.textFields?[1].text != "")
      })
    }
    
    alertController.addTextField { (textField) in
      textField.placeholder = "Enter the license serial"
      NotificationCenter.default.addObserver(forName: NSNotification.Name.UITextFieldTextDidChange, object: textField, queue: OperationQueue.main, using: { (notification) in
        createAlertAction.isEnabled = (alertController.textFields?[0].text != "" && alertController.textFields?[1].text != "")
      })
    }
    
    let cancelAlertAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
    alertController.addAction(cancelAlertAction)
    
    present(alertController, animated: true)
  }
  
  private func createLicense(id: String, serial: String)
  {
    let request = ListLicenses.CreateLicense.Request(id: id, serial: serial)
    interactor?.createLicense(request: request)
  }
  
  func displayCreatedLicense(viewModel: ListLicenses.CreateLicense.ViewModel)
  {
    displayedLicenses = viewModel.displayedLicenses
    tableView.reloadData()
  }
  
  // MARK: Delete license
  
  func deleteLicense(at indexPath: IndexPath)
  {
    let request = ListLicenses.DeleteLicense.Request(indexPath: indexPath)
    interactor?.deleteLicense(request: request)
  }
  
  func displayDeletedLicense(viewModel: ListLicenses.DeleteLicense.ViewModel)
  {
    displayedLicenses = viewModel.displayedLicenses
    tableView.reloadData()
  }
}
